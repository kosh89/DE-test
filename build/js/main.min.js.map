{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["(() => {\n  const ACTIVE_CLASS = `active`;\n\n  const headerBurgerElement = document.querySelector(`.header__burger`);\n  const burgerClassList = headerBurgerElement.classList;\n\n  const headerNavigationElement = document.querySelector(`.header__navigation`);\n  const headerNavigationClassList = headerNavigationElement.classList;\n\n  const navigationLinkElements = document.querySelectorAll(`.navigation__link`);\n\n  const onHeaderBurgerClick = () => {\n    if (burgerClassList.contains(ACTIVE_CLASS)) {\n      burgerClassList.remove(ACTIVE_CLASS);\n      headerNavigationClassList.remove(ACTIVE_CLASS);\n    } else {\n      burgerClassList.add(ACTIVE_CLASS);\n      headerNavigationClassList.add(ACTIVE_CLASS);\n    }\n  };\n\n  const onNavigationLinkClickHandler = () => {\n    burgerClassList.remove(ACTIVE_CLASS);\n    headerNavigationClassList.remove(ACTIVE_CLASS);\n  };\n\n  headerBurgerElement.addEventListener(`click`, onHeaderBurgerClick);\n  navigationLinkElements.forEach((link) => {\n    link.addEventListener(`click`, onNavigationLinkClickHandler);\n  });\n})();\n\n(() => {\n  const CLOSED_MODAL_CLASS = `closed`;\n  const OVERFLOW_HIDDEN_STYLE = `hidden`;\n  const OVERFLOW_VISIBLE_STYLE = `visible`;\n  const ESC_KEYCODE = 27;\n  const VALID_INPUT_COLOR = `green`;\n  const INVALID_INPUT_COLOR = `red`;\n\n  const body = document.querySelector(`body`);\n  const workButtonElement = body.querySelector(`.work__button`);\n\n  const modalElement = body.querySelector(`.modal`);\n  const modalWrapperElement = modalElement.querySelector(`.modal__wrapper`);\n  const modalContentElement = modalElement.querySelector(`.modal__content`);\n  const modalCloseButtonElement = modalElement.querySelector(`.modal__close`);\n  const modalDataSendingElement = body.querySelector(`.modal__data-sending`);\n  const modalStatusElement = modalDataSendingElement.querySelector(`.modal__status`);\n  const modalMessageElement = modalDataSendingElement.querySelector(`.modal__message`);\n\n  const formElement = body.querySelector(`.form`);\n  const formInputElements = formElement.querySelectorAll(`.form__input`);\n  const nameInputElement = formElement.querySelector(`.form__input--name`);\n  const emailInputElement = formElement.querySelector(`.form__input--email`);\n  const messageInputElement = formElement.querySelector(`.form__input--message`);\n\n  const emailPattern = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n  const onInputTypeHandler = function (event) {\n    if (event.target === emailInputElement) {\n      emailInputElement.style.borderColor = emailPattern.test(String(emailInputElement.value).toLowerCase()) ? VALID_INPUT_COLOR : INVALID_INPUT_COLOR;\n    } else {\n      event.target.style.borderColor = event.target.value ? VALID_INPUT_COLOR : INVALID_INPUT_COLOR;\n    }\n  };\n\n  const onWorkButtonClickHandler = (event) => {\n    event.preventDefault();\n    showModal();\n  };\n\n  const showModal = () => {\n    modalElement.classList.remove(CLOSED_MODAL_CLASS);\n    body.style.overflowY = OVERFLOW_HIDDEN_STYLE;\n    document.addEventListener(`keydown`, onModalEscPress);\n  };\n\n  const closeModal = () => {\n    formInputsClear(formInputElements);\n    modalElement.classList.add(CLOSED_MODAL_CLASS);\n    modalContentElement.classList.remove(CLOSED_MODAL_CLASS);\n    modalDataSendingElement.classList.add(CLOSED_MODAL_CLASS);\n    body.style.overflowY = OVERFLOW_VISIBLE_STYLE;\n    document.removeEventListener(`keydown`, onModalEscPress);\n  };\n\n  const onModalEscPress = (event) => {\n    if (event.keyCode === ESC_KEYCODE) {\n      closeModal();\n    }\n  };\n\n  const onModalWrapperClickHandler = (event) => {\n    event.preventDefault();\n    if (event.target.classList.contains(`modal__wrapper`)) {\n      closeModal();\n    }\n  };\n\n  const formInputsClear = (formInputs) => {\n    formInputs.forEach((input) => {\n      input.value = ``;\n      input.style.borderColor = ``;\n    });\n  };\n\n  window.showSendingStatus = (error) => {\n    if (error) {\n      modalStatusElement.textContent = `Error!`;\n      modalMessageElement.textContent = error;\n    } else {\n      modalStatusElement.textContent = `Success!`;\n      modalMessageElement.textContent = `Your data has been sent.`;\n    }\n\n    modalContentElement.classList.add(CLOSED_MODAL_CLASS);\n    modalDataSendingElement.classList.remove(CLOSED_MODAL_CLASS);\n\n    setTimeout(() => {\n      closeModal();\n    }, 2500);\n  };\n\n  const onFormSubmitHandler = (event) => {\n    event.preventDefault();\n\n    if (emailPattern.test(String(emailInputElement.value).toLowerCase()) &&\n      nameInputElement.value &&\n      messageInputElement.value) {\n      window.backend.save(new FormData(formElement), window.showSendingStatus, window.backend.onServerRequestError);\n    }\n  };\n\n  workButtonElement.addEventListener(`click`, onWorkButtonClickHandler);\n  modalWrapperElement.addEventListener(`mouseup`, onModalWrapperClickHandler);\n  modalCloseButtonElement.addEventListener(`click`, closeModal);\n  formElement.addEventListener(`submit`, onFormSubmitHandler);\n\n  formInputElements.forEach((input) => {\n    input.addEventListener(`input`, onInputTypeHandler);\n  });\n})();\n\n(() => {\n  const API_URL = `https://echo.htmlacademy.ru`;\n  const POST_METHOD = `POST`;\n  const HTTP_REQUEST_OK = 200;\n\n  const request = (url, method, data, onSuccess, onError) => {\n    const xhr = new XMLHttpRequest();\n    xhr.responseType = `json`;\n\n    xhr.addEventListener(`load`, () => {\n      if (xhr.status === HTTP_REQUEST_OK) {\n        onSuccess(xhr.response);\n      } else {\n        onError(`Response Status: ` + xhr.status + ` ` + xhr.statusText);\n      }\n    });\n\n    xhr.addEventListener(`error`, () => {\n      if (xhr.statusText !== HTTP_REQUEST_OK) {\n        onError(`Connection failed`);\n      }\n    });\n\n    xhr.open(method, url);\n    xhr.send(data);\n  };\n\n  window.backend = {\n    save: (data, onSuccess, onError) => {\n      request(API_URL, POST_METHOD, data, onSuccess, onError);\n    },\n\n    onServerRequestError: (errorMessage) => {\n      window.showSuccessMessage(errorMessage);\n    }\n  };\n})();\n"],"file":"main.min.js"}